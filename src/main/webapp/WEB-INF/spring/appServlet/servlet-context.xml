<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"	
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd">

	<annotation-driven />

	<resources mapping="/resources/**" location="/resources/" />

	<context:component-scan base-package="com.project" />

	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:viewClass="org.springframework.web.servlet.view.JstlView"
		p:prefix="/WEB-INF/index.jsp?body=views/"
		p:suffix=".jsp"/>
		

	<view-controller path="/Community" view-name="/community/CommunityBoardList" />
	<view-controller path="/CommunityBoardDetail" view-name="/community/BoardDetail" />

	<!--
		클라이언트의 요청이 특별한 처리 없이 단순히 뷰만 보여줘야 할 경우에
		아래와 같이 뷰 전용 컨트롤러를 설정하여 뷰 페이지를 지정할 수 있다.
			
		<view-controller /> 태그는 뷰 전용 컨트롤러를 설정하는 태그로
		어떤 요청이 특별한 비즈니스 로직 처리 없이 단순히 뷰만 보여줘야 할 필요가
		있을 때 유용하게 사용할 수 있는 설정이다. 아래는 /writeForm, /boardWrite로
		들어오는 요청에 대한 뷰를 writeForm으로 지정한 예로 이 설정 파일에 bean으로
		등록한 ViewResolver의 prefix와 suffix가 적용된 뷰를 보여주는 설정이다. 
		다시 말해 view-name 속성에 지정하는 뷰의 이름은 ViewResolver에서
		prefix, suffix에 지정한 정보를 제외한 나머지를 지정하면 된다.
		
		<view-controller /> 태그의 path 속성에 지정한 경로와 동일한
		요청 URI가 컨트롤러의 @RequestMapping에 POST 방식만 지정되어
		있다면 HTTP Status 405 - Request method 'GET' not supported
		예외가 발생한다.
		
		여러 개의 요청 URI에 같은 뷰를 적용하려면 아래와 같이 여러 번 지정하면 된다.
	-->
	<view-controller path="/noticewriteForm" view-name="noticewriteForm" />
	<view-controller path="/noticeWrite" view-name="noticewriteForm" />

	
	
	<view-controller path="/boardWrite" view-name="writeForm" />
	<view-controller path="/Communityupdate" view-name="updateForm" />
	<view-controller path="/" view-name="redirect:/home" />
	<redirect-view-controller path="/index" redirect-url="/boardList"/>
	<redirect-view-controller path="/default" redirect-url="/boardList"/>
	<view-controller path="/writeForm" view-name="community/writeForm" />
	
	
	<!--
		아래는 ContextRoot/write로 들어오는 요청을 위에서 view-controller에
		설정한 /writeForm 으로 리다이렉트 하는 예 이다.
	-->
	<redirect-view-controller path="/noticewrite" redirect-url="/noticewriteForm"/>
	
	<!-- 회원가입 폼 요청을 처리하는 뷰 전용 컨트롤러 설정 -->

	<view-controller path="/joinForm" view-name="member/memberJoinForm" />
	
	
	<!-- 상품 등록 페이지로 이동 -->
	<view-controller path="/productWriteForm" view-name="product/productWriteForm" />
	
	
	<!-- 지도 테스트 -->
	<view-controller path="/kakao" view-name="test/kakao" />


<!--  	
	<beans:bean id="loginCheckInterceptor" 
		class="com.project.interceptor.LoginCheckInterceptor" />
	<interceptors>
		<interceptor>
			<mapping path="/boardDetail" />
			<mapping path="/add*" />
			<mapping path="/write*" />
			<mapping path="/update*" />
			<mapping path="/memberUpdate*" />
			<beans:ref bean="loginCheckInterceptor" />			
		</interceptor>		

	</interceptors>	

 -->	
<!-- 		 
		<interceptor>
			<mapping path="/member/*" />
			<mapping path="/board/*" />
			<beans:bean class=
				"com.springstudy.bbs.interceptor.LoginCheckInterceptor" />
		</interceptor>
		
	</interceptors>	 
 -->
 
 
</beans:beans>
